<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wbits on What Bird Is That?</title><link>/</link><description>Recent content in wbits on What Bird Is That?</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><copyright>Copyright Â© 2020, David Walters.</copyright><lastBuildDate>Sat, 15 Aug 2020 14:40:44 +1000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Protecting Change With 2FA</title><link>/posts/protecting-change-with-2fa/</link><pubDate>Sat, 15 Aug 2020 14:40:44 +1000</pubDate><guid>/posts/protecting-change-with-2fa/</guid><description>Using 2FA to protect mutative actions When deciding whether or not to use multi-factor (or two-factor for the purposes of this post) authentication to verify the identity of a user the tradeoffs are around implementation complexity, user experience and of course, security.
In this post, THE BUSINESS considers various things necessary, or not necessary. For example, THE BUSINESS considers it necessary that the user&amp;rsquo;s password be at least 12 characters long.</description></item><item><title>Retro for Value</title><link>/posts/retro-for-value/</link><pubDate>Sat, 08 Aug 2020 17:58:45 +1000</pubDate><guid>/posts/retro-for-value/</guid><description>Retrospectives and the Tightest Possible Feedback Loop Retrospectives that happen infrequently, say every 6 weeks are less effective primarily due to the amount of time spent &amp;ldquo;doing it wrong&amp;rdquo;.
These habits become so ingrained and taken for granted that by the time retrospective comes around, the team is highly reluctant to change the way they are working and try to push back on any (now major) changes to the way of working that will cause a momentary stoppage in the flow of work.</description></item><item><title>You Are Valued</title><link>/posts/you-are-valued/</link><pubDate>Sun, 02 Aug 2020 13:50:50 +1000</pubDate><guid>/posts/you-are-valued/</guid><description>Sincerity is meaningless In today&amp;rsquo;s workplace, a lot of emphasis is placed on the wellbeing of workers. In fact, workers are not supposed to be called workers. Resources are people, people are participants.
When this kind of cultural shift is applied across the social spectrum of an organisation, the effects are widespread - not all of them are the expected outcomes of inspiration, motivation, equality, safety.
There are negative effects too, dangerous effects to productivity.</description></item><item><title>Retro Is Broken</title><link>/posts/retro-is-broken/</link><pubDate>Sat, 01 Aug 2020 15:52:03 +1000</pubDate><guid>/posts/retro-is-broken/</guid><description>Delivery teams are focusing on the Wrong Things I have participated in more Retrospectives than I can count. Years and years of working with dev teams has given me an insight into some antipatterns which are causing the failure of not just continuous improvement, but are causing teams to actually diminish their effectiveness and productivity.
Antipattern #1 : It&amp;rsquo;s all about US So many times I have seen super-awesome change-agents, transformation coaches, Agile leaders, practice leads (and more) who are playing the &amp;ldquo;popularity contest&amp;rdquo;.</description></item><item><title>Clean Cloud</title><link>/posts/clean-cloud/</link><pubDate>Mon, 29 Jun 2020 22:22:51 +1000</pubDate><guid>/posts/clean-cloud/</guid><description>A set of things that can be easily assimilated into an enterprise IT culture Enterprise IT is rife with litter.
There are EC2 instances running for months, called TEST001.
There are S3 buckets with no objects in them, that have no tags.
There are entire features without a single automated test.
There are items of work that do not have adequate acceptance criteria.
There are overprovisioned servers, long-running environments, bloated taxonomies &amp;hellip;</description></item><item><title>Notes on a stack</title><link>/posts/notes-on-a-stack/</link><pubDate>Fri, 15 May 2020 09:23:22 +1000</pubDate><guid>/posts/notes-on-a-stack/</guid><description>Authorised Greeting A simple &amp;ldquo;workload&amp;rdquo; for greeting &amp;ldquo;known&amp;rdquo; or &amp;ldquo;unknown&amp;rdquo; visitors to a site.
In order to enhance the personality of the public web site: As the business I want to greet unauthorised visitors formally So that politeness is properly observed As the business I want to greet authorised visitors informally So camaraderie is enriched Scenario:users of the API are greeted Background: Given the API is available Given a visitor is &amp;lt;auth_level&amp;gt;* they request a greeting When they are greeted Then the greeting is &amp;lt;greeting&amp;gt;Examples: | auth_level| greeting||unauthorised|formal||authorised|informal| Notes for contemplating a simple serverless workload This is a brain dump outlining the minimum required documentation of the behaviour of the example workload.</description></item><item><title>Begin With Disaster</title><link>/posts/begin-with-disaster/</link><pubDate>Mon, 11 May 2020 01:28:44 +1000</pubDate><guid>/posts/begin-with-disaster/</guid><description>Automate the ability to restore the system from completely nothing In creating a software delivery flow it can be easy to overlook the test-first approach in favour of &amp;ldquo;getting something up and running&amp;rdquo;.
This is characterised as &amp;ldquo;business-pressure&amp;rdquo; or &amp;ldquo;time-to-market&amp;rdquo; but neglects a key NFR of most commercially-critical software.
Disaster Recovery When a new feature (or set of features, eg. a CQRS microservices on k8s) is kicked off, resisting the pressure to deliver a flimsy facade showing some fake data can unlock the more potent business value of disaster recovery.</description></item><item><title>TEST is a four letter word.</title><link>/posts/test-is-a-four-letter-word/</link><pubDate>Fri, 11 Nov 2016 18:20:00 +1000</pubDate><guid>/posts/test-is-a-four-letter-word/</guid><description>These days it is so easy to tie ourselves up in knots with one simple word. Testing is something that ought to be a part of the fabric of the delivery cycle, the skein of the SDLC.
Analysts should be testing their requirements against both the business and the delivery teams, frequently asking &amp;ldquo;is this what you want?&amp;rdquo; and &amp;ldquo;can you build this?&amp;rdquo; so as to gain rapid feedback about the direction they are leading the software.</description></item><item><title>Reliable, Evolving, Agile, Lean</title><link>/posts/real-blog/</link><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid>/posts/real-blog/</guid><description>./realblog Reliable Evolving Agile Lean Warning: Star Wars Quotes
Software that survives. A lot of software today is not given a chance to survive. It&amp;rsquo;s written up, posted on the web, and taken down all within days. This kind of code is &amp;lsquo;firefly code&amp;rsquo; and sometimes that&amp;rsquo;s what we need to get our message across. We know it&amp;rsquo;s only just barely working. We have factored that into our plan.</description></item><item><title>100% Coverage is only the beginning</title><link>/posts/code-coverage/</link><pubDate>Fri, 15 Jul 2016 14:20:55 +1000</pubDate><guid>/posts/code-coverage/</guid><description>Code coverage gives us a solid foundation for delivery confidence, but it&amp;rsquo;s not the only way to boost delivery confidence. Confidence: the goal of a quality-focused delivery team. Code confidence is attained through rigorous and frequently repeated testing of the system against a raft of behavioural expectations.
These expectations form the specifications of the system and in fact document the system: both the functioning system, and the desires of the business that commissioned the system.</description></item></channel></rss>